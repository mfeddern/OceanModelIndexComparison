select(-c(.by))
output<-list(summary, predictions, results,data.frame(smooth_data))
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint(gamfit)%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))
output<-list(summary, predictions, results)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
model<- "Model 1"
covariate<-"covariate1"
covariate<-covariate1
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
cov<-covariate1
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint(gamfit)%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))
smooth_estimates(gamfit)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))
output<-list(summary, predictions, results,smooth_data)
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamM2C1<-gamoutput("Model 2", "covariate1", covariate1)
gamM1C2<-gamoutput("Model 1", "covariate2", covariate2)
gamM2C2<-gamoutput("Model 2", "covariate2", covariate2)
gamM1C1[[4]]
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = model)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamM2C1<-gamoutput("Model 2", "covariate1", covariate1)
gamM1C2<-gamoutput("Model 1", "covariate2", covariate2)
gamM2C2<-gamoutput("Model 2", "covariate2", covariate2)
predictions_gam<- data.frame(gamM1C1[[2]])%>%
bind_rows(data.frame(gamM2C1[[2]]))%>%
bind_rows(data.frame(gamM1C2[[2]]))%>%
bind_rows(data.frame(gamM2C2[[2]]))
results_gam<- data.frame(gamM1C1[[3]])%>%
bind_rows(data.frame(gamM2C1[[3]]))%>%
bind_rows(data.frame(gamM1C2[[3]]))%>%
bind_rows(data.frame(gamM2C2[[3]]))
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))
partial_effects<-ggplot(smooths_gam, aes(x = Value, y = .estimate)) +  # Setup the plot with the fitted values
facet_wrap(~Smooth)+
geom_line() + # Add estimated smooth
xlim(c(-2,3))+
geom_ribbon(aes(ymax = .upper_ci, ymin = .lower_ci), fill = "black", alpha = 0.2) + # Add credible interval
geom_point(data = observations%>%filter(year %in% years), aes(x = Value, y = Y_rec), color = "black") + # Add your data points
labs(x = "Standardized Ecological Conditions", y = "Partial Residual")+ # Add labels
geom_text(data = observations%>%filter(year %in% years), aes(x = Value, y = Y_rec,label=year),hjust=0,nudge_x = 0.1)+
theme_classic()
ggplot(smooths_gam, aes(x = Value, y = .estimate)) +  # Setup the plot with the fitted values
facet_wrap(~Smooth)+
geom_line() + # Add estimated smooth
xlim(c(-2,3))+
geom_ribbon(aes(ymax = .upper_ci, ymin = .lower_ci), fill = "black", alpha = 0.2)
smooths_gam
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
#pivot_longer(c(combos),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = model)
observations<-data_full%>%
select(year,Y_rec,covariate)%>%
pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")
smooth_data <- na.omit(smooth_data )
output<-list(summary, predictions, results,smooth_data, observations)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = model)
covariate
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = model)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
smooths_gam
smooths_gam
data_full
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))%>%
left_join(data_full%>%select(Y_rec, year))
data_full%>%select(Y_rec, year)
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))%>%
left_join(data.frame(data_full%>%select(Y_rec, year)))
data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))
ggplot(smooths_gam, aes(x = cov, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~model)
smooths_gam
ggplot(smooths_gam, aes(x = cov, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line()
partial_effects<-ggplot(smooths_gam, aes(x = cov, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line() + # Add estimated smooth
theme_bw()
partial_effects
gamoutput<-function(model, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model==model), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = model)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = model, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = model)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamM2C1<-gamoutput("Model 2", "covariate1", covariate1)
gamM1C2<-gamoutput("Model 1", "covariate2", covariate2)
gamM2C2<-gamoutput("Model 2", "covariate2", covariate2)
predictions_gam<- data.frame(gamM1C1[[2]])%>%
bind_rows(data.frame(gamM2C1[[2]]))%>%
bind_rows(data.frame(gamM1C2[[2]]))%>%
bind_rows(data.frame(gamM2C2[[2]]))
results_gam<- data.frame(gamM1C1[[3]])%>%
bind_rows(data.frame(gamM2C1[[3]]))%>%
bind_rows(data.frame(gamM1C2[[3]]))%>%
bind_rows(data.frame(gamM2C2[[3]]))
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))%>%
cbind(data.frame(data_full%>%select(Y_rec, year)))
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))
```{r, echo=FALSE}
results_gam
partial_effects<-ggplot(smooths_gam, aes(x = cov, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line() + # Add estimated smooth
theme_bw()
partial_effects
gamoutput<-function(modelname, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model == modelname), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = modelname)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = modelname, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = modelname)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamM2C1<-gamoutput("Model 2", "covariate1", covariate1)
gamM1C2<-gamoutput("Model 1", "covariate2", covariate2)
gamM2C2<-gamoutput("Model 2", "covariate2", covariate2)
predictions_gam<- data.frame(gamM1C1[[2]])%>%
bind_rows(data.frame(gamM2C1[[2]]))%>%
bind_rows(data.frame(gamM1C2[[2]]))%>%
bind_rows(data.frame(gamM2C2[[2]]))
results_gam<- data.frame(gamM1C1[[3]])%>%
bind_rows(data.frame(gamM2C1[[3]]))%>%
bind_rows(data.frame(gamM1C2[[3]]))%>%
bind_rows(data.frame(gamM2C2[[3]]))
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))
results_gam
library(tidyverse)
library(ggplot2)
library(readr)
library(data.table)
library(lubridate)
library(corrplot)
library(mgcv)
library(dplyr)
library(tidync)
library(gratia)
set.seed(99)
year<- rep(seq(1980, 2009),2) # a variable for year
modelnames<- rep(c("Model 1", "Model 2"), each=30) # a variable for models,
#equivalent to ROMS/GLORYs
cov1mod1<- arima.sim(list(order = c(1,0,0), ar = 0.7), n = 30)%>% #random time series
scale() # standardize it!
cov1mod2 <- cov1mod1+rnorm(n= 30, mean = 1, sd=0.3)%>%
scale()#second time series that
#covaries with the first
set.seed(150)
cov2mod1<- arima.sim(list(order = c(1,0,0), ar = 0.5), n = 30)%>% #random time series
scale() # standardize it!
cov2mod2 <- cov2mod1+rnorm(n= 30, mean =1, sd=1)%>%
scale()
#second time series that
#covaries with the first
dataset <- data.frame(year=year,covariate1=c(cov1mod1,cov1mod2),covariate2=c(cov2mod1,cov2mod2), Model=modelnames) #combine!
#quick check just to see if these look roughly like your ocean data
ggplot(data=dataset, aes(x=year, y=covariate1, group=Model, col=Model))+
geom_line()+
theme_bw()
ggplot(data=dataset, aes(x=year, y=covariate2, group=Model, col=Model))+
geom_line()+
theme_bw()
#this tells us the covariance
cov1<- cov(dataset%>%filter(Model=="Model 1")%>%select(covariate1),
dataset%>%filter(Model=="Model 2")%>%select(covariate1))
cov2<-cov(dataset%>%filter(Model=="Model 1")%>%select(covariate2),
dataset%>%filter(Model=="Model 2")%>%select(covariate2))
#this tells us the correlation coefficient
cor1<- cor(dataset%>%filter(Model=="Model 1")%>%select(covariate1),
dataset%>%filter(Model=="Model 2")%>%select(covariate1))
cor2 <-cor(dataset%>%filter(Model=="Model 1")%>%select(covariate2),
dataset%>%filter(Model=="Model 2")%>%select(covariate2))
#lets store these in a dataframe so we have them
data.frame(covariate=c("covariate 1", "covarate 2"),
covariance = c(cov1, cov2), correlation = c(cor1, cor2))
linear1 <- 4
linear2 <- 0.6
quad2<- 5
intercept <- 1
error<- rnorm(30, 0.1,0.5)
#this is just a simple qudratic equation with 2 covraiates plus random error
Y_rec <- linear1*cov1mod1-linear2*cov2mod1-quad2*cov2mod1^2+error+intercept
data_full<-dataset%>%
mutate(Y_rec=rep(Y_rec, 2))
ggplot(data=data_full, aes(x=covariate1, y=Y_rec, group=Model, col=Model))+
geom_point()+
geom_smooth(method='lm')+
theme_bw()
ggplot(data=data_full, aes(x=covariate2, y=Y_rec, group=Model, col=Model))+
geom_point()+
geom_smooth(method='lm')+
theme_bw()
ggplot(data=data_full, aes(x=covariate2, y=Y_rec, group=Model, col=Model))+
geom_point()+
geom_smooth(method = "gam", formula = y ~ s(x, k = 3))+
theme_bw()
gamoutput<-function(modelname, covariate, cov){
gamfit<- gam(Y_rec~s(cov,k=3), data=data_full%>%filter(Model == modelname), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = modelname)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = modelname, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = modelname)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamoutput<-function(modelname, covariate, cov){
gamfit<- gam(Y_rec~s(data_full$cov,k=3), data=data_full%>%filter(Model == modelname), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = modelname)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = modelname, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = modelname)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
data_full
data_full_long <- pivot_longer(data_full, -c(Y_rec, Model, year), names_to = "covariatename", values_to = "Value")
data_full_long
gamoutput<-function(modelname, covariate){
gamfit<- gam(Y_rec~s(Value,k=3), data=data_full%>%filter(Model == modelname, covariatename==covariate), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = modelname)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = modelname, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = modelname)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1", covariate1)
gamM1C1<-gamoutput("Model 1", "covariate1")
gamfit<- gam(Y_rec~s(Value,k=3), data=data_full_long%>%filter(Model == modelname, covariatename==covariate), method = "REML")
data_full_long <- pivot_longer(data_full, -c(Y_rec, Model, year), names_to = "covariatename", values_to = "Value")
gamoutput<-function(modelname, covariate){
gamfit<- gam(Y_rec~s(Value,k=3), data=data_full_long%>%filter(Model == modelname, covariatename==covariate), method = "REML")
summary <- summary(gamfit)
predictions <- data.frame(prediction=predict(gamfit, se.fit=TRUE),year=unique(data_full$year))%>%
mutate(covariate=covariate, Model = modelname)
#pulling out the values we need and adding to a dataframe
results <- data.frame(covariate=covariate, Model = modelname, pvalue = summary$s.table[, "p-value"], DevianceExp = summary$dev.expl, rsq = summary$dev.expl)
smooth_data <- smooth_estimates(gamfit)%>%  # Or specify the smooth term you want to plot
add_constant(model_constant(gamfit)) %>% # Add the intercept
add_confint()%>% # Add the credible interval
# pivot_longer(c(covariate),names_to = "Smooth",values_to ="Value")%>%
select(-c(.by))%>%
mutate(covariate=covariate, Model = modelname)
output<-list(summary, predictions, results,smooth_data)
return(output)
}
gamM1C1<-gamoutput("Model 1", "covariate1")
gamM2C1<-gamoutput("Model 2", "covariate1")
gamM1C2<-gamoutput("Model 1", "covariate2")
gamM2C2<-gamoutput("Model 2", "covariate2")
predictions_gam<- data.frame(gamM1C1[[2]])%>%
bind_rows(data.frame(gamM2C1[[2]]))%>%
bind_rows(data.frame(gamM1C2[[2]]))%>%
bind_rows(data.frame(gamM2C2[[2]]))
results_gam<- data.frame(gamM1C1[[3]])%>%
bind_rows(data.frame(gamM2C1[[3]]))%>%
bind_rows(data.frame(gamM1C2[[3]]))%>%
bind_rows(data.frame(gamM2C2[[3]]))
smooths_gam<- data.frame(gamM1C1[[4]])%>%
bind_rows(data.frame(gamM2C1[[4]]))%>%
bind_rows(data.frame(gamM1C2[[4]]))%>%
bind_rows(data.frame(gamM2C2[[4]]))
gamM1C1
results_gam
smooths_gam
partial_effects<-ggplot(smooths_gam, aes(x = cov, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line() + # Add estimated smooth
theme_bw()
partial_effects
partial_effects<-ggplot(smooths_gam, aes(x = Value, y = .estimate)) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line() + # Add estimated smooth
theme_bw()
partial_effects
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
theme_bw()
partial_effects
data_full_long
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
geom_point(data_full_long, aes(x=Value,y=Y_rec))+
theme_bw()
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
geom_point(aes(data=data_full_long,x=Value,y=Y_rec))+
theme_bw()
partial_effects
data_full
data_full_long
smooths_gam%>%left_join(data_full_long)
smooth_full<- smooths_gam%>%left_join(data_full_long)
partial_effects<-ggplot(smooth_full) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
geom_point(aes(y=Y_rec))+
theme_bw()
partial_effects
ggplot(smooth_full) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate))
smooth_full
partial_effects<-ggplot(smooth_gam) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
geom_point(data = data_full_long, aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(covariate~Model)+
geom_line(aes(x = Value, y = .estimate)) + # Add estimated smooth
geom_point(data = data_full_long, aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model)) + # Add estimated smooth
geom_point(data = data_full_long, aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model), lwd=1.25) + # Add estimated smooth
geom_point(data = data_full_long, aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects
data_full_long,
data_full_long
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model), lwd=1.25) + # Add estimated smooth
geom_point(data = data_full_long%>%filter(Model=="Model 1"), aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects
data_full_long
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model), lwd=1.25) + # Add estimated smooth
geom_point(data = data_full_long%>%filter(Model=="Model 1")%>%rename(covariatename=civariate), aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model), lwd=1.25) + # Add estimated smooth
geom_point(data = data_full_long%>%filter(Model=="Model 1")%>%rename(covariatename=covariate), aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects<-ggplot(smooths_gam) +  # Setup the plot with the fitted values
facet_grid(~covariate)+
geom_line(aes(x = Value, y = .estimate, col=Model), lwd=1.25) + # Add estimated smooth
geom_point(data = data_full_long%>%filter(Model=="Model 1")%>%rename(covariate=covariatename), aes(x = Value, y = Y_rec), color = "black") + # Add your data points
theme_bw()
partial_effects
