knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/Nicks Sablefish Comparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# colnames(roms_old_all)
roms_old = roms_old_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
roms_new_all =  data.frame(read.table('ROMS_vars_ext_north.csv',sep=',',header=TRUE))
roms_new_all =  data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_ext_north.csv',sep=',',header=TRUE))
roms_new = roms_new_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
roms = data.frame(rbind(roms_old,roms_new))
ROMS = roms # save before altering
write.csv(roms, 'DATA_ROMS_combined_updated_raw.csv', row.names = FALSE)
roms$y2 = roms$Year
roms$y2 = ifelse(roms$Month==12, roms$Year+1,roms$Year)
ROMS = data.frame(min(roms$Year):max(roms$Year))
colnames(ROMS)<-'Year'
roms$H2a = roms$H2a-3.5
H2a = aggregate(H2a ~ Year, data=roms[roms$Month %in% 6:12,], FUN=sum)           #H2a
ROMS$H2a = H2a[match(ROMS$Year, H2a$Year+1),2]
ROMS$H7a = aggregate(H7a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H7a
roms$H8a = roms$H8a - 3.5 # for degree days
ROMS$H8a = aggregate(H8a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H8a
ROMS$H10 = aggregate(H10 ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]                #H10
roms$H17a = roms$H21a - 3.5
ROMS$H17a = aggregate(H17a ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]            #H21a
ROMS$version = ifelse(ROMS$Year<2011,'old','new')
# head(ROMS)
colnames(ROMS) = c('Year','DDpre','CSTegg','DDegg','LSTyolk','DDlarv','Version')
fish2016 = data.frame(read.table('/Users/Nick.Tolimieri/Documents/Sablefish/Sablefish Recruitment/_01_Data/SablefishData2015.csv', header=TRUE, sep=','))
fish2016 = data.frame(read.table('Src/NicksSablefishComparison/SablefishData2015.csv', header=TRUE, sep=','))
h = 0.6
Ro = 17198
So = 115622
b = (Ro*0.2*So)/(h*Ro)-(0.2*So)
S = fish2016$sp.bio
R.pred <- (Ro*S/(b+S))
R.ass = fish2016$age.0 # recruitment from the 20216 assessment
resids = R.ass - R.pred
# resids
fish2016$resids = resids
# head(fish2016)
colnames(fish2016)[1] = 'Year'
fish2019 <- data.frame((read.csv("C:/Users/nick.tolimieri/Documents/Sablefish/_00_Sablefish SSH - 1925-2019 - RecDev/Processed_Data/Data_All_Proccessed_Data.csv", header=TRUE )))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
roms_new_all =  data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_ext_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
# bring in old roms data ####
roms_old_all = data.frame(read.csv('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
knitr::opts_chunk$set(echo = FALSE,
fig.align = 'center')
HomeFile <- getwd()
setwd(HomeFile)
HomeFile
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('Src/NicksSablefishComparison/ROMS_vars_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('ROMS_vars_north.csv',sep=',',header=TRUE))
# colnames(roms_old_all)
roms_old = roms_old_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
# updated roms data #####
roms_new_all =  data.frame(read.table('Src/NicksSablefishComparison/ROMS_vars_ext_north.csv',sep=',',header=TRUE))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('ROMS_vars_north.csv',sep=',',header=TRUE))
# colnames(roms_old_all)
roms_old = roms_old_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
# updated roms data #####
roms_new_all =  data.frame(read.table('ROMS_vars_ext_north.csv',sep=',',header=TRUE))
roms_new = roms_new_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
# combine roms data ####
roms = data.frame(rbind(roms_old,roms_new))
ROMS = roms # save before altering
write.csv(roms, 'DATA_ROMS_combined_updated_raw.csv', row.names = FALSE)
# head(roms)
# tail(roms)
# make new var for winter values that cross years
roms$y2 = roms$Year
roms$y2 = ifelse(roms$Month==12, roms$Year+1,roms$Year)
#### calcuate periods specific values for each ROMS variable #####
ROMS = data.frame(min(roms$Year):max(roms$Year))
colnames(ROMS)<-'Year'
roms$H2a = roms$H2a-3.5
H2a = aggregate(H2a ~ Year, data=roms[roms$Month %in% 6:12,], FUN=sum)           #H2a
ROMS$H2a = H2a[match(ROMS$Year, H2a$Year+1),2]
ROMS$H7a = aggregate(H7a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H7a
roms$H8a = roms$H8a - 3.5 # for degree days
ROMS$H8a = aggregate(H8a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H8a
ROMS$H10 = aggregate(H10 ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]                #H10
# 21a and 17a are the same data summed over different periods
roms$H17a = roms$H21a - 3.5
ROMS$H17a = aggregate(H17a ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]            #H21a
ROMS$version = ifelse(ROMS$Year<2011,'old','new')
# head(ROMS)
colnames(ROMS) = c('Year','DDpre','CSTegg','DDegg','LSTyolk','DDlarv','Version')
##### BRING IN FISH DATA AND PROCESS A BIT ####
#### data through 2015 from the 2016 assessment ####
fish2016 = data.frame(read.table('Src/NicksSablefishComparison/SablefishData2015.csv', header=TRUE, sep=','))
####### BRING IN ROMS DATA AND PROCESS ###################
# bring in old roms data ####
roms_old_all = data.frame(read.csv('ROMS_vars_north.csv',sep=',',header=TRUE))
# colnames(roms_old_all)
roms_old = roms_old_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
# updated roms data #####
roms_new_all =  data.frame(read.table('ROMS_vars_ext_north.csv',sep=',',header=TRUE))
roms_new = roms_new_all[,c('Year','Month','Day','H2a','H7a','H8a','H10','H21a')]
# combine roms data ####
roms = data.frame(rbind(roms_old,roms_new))
ROMS = roms # save before altering
write.csv(roms, 'DATA_ROMS_combined_updated_raw.csv', row.names = FALSE)
# head(roms)
# tail(roms)
# make new var for winter values that cross years
roms$y2 = roms$Year
roms$y2 = ifelse(roms$Month==12, roms$Year+1,roms$Year)
#### calcuate periods specific values for each ROMS variable #####
ROMS = data.frame(min(roms$Year):max(roms$Year))
colnames(ROMS)<-'Year'
roms$H2a = roms$H2a-3.5
H2a = aggregate(H2a ~ Year, data=roms[roms$Month %in% 6:12,], FUN=sum)           #H2a
ROMS$H2a = H2a[match(ROMS$Year, H2a$Year+1),2]
ROMS$H7a = aggregate(H7a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H7a
roms$H8a = roms$H8a - 3.5 # for degree days
ROMS$H8a = aggregate(H8a ~ Year, data=roms[roms$Month %in% 1:4,], FUN=sum)[,2]              #H8a
ROMS$H10 = aggregate(H10 ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]                #H10
# 21a and 17a are the same data summed over different periods
roms$H17a = roms$H21a - 3.5
ROMS$H17a = aggregate(H17a ~ Year, data=roms[roms$Month %in% 2:5,], FUN=sum)[,2]            #H21a
ROMS$version = ifelse(ROMS$Year<2011,'old','new')
# head(ROMS)
colnames(ROMS) = c('Year','DDpre','CSTegg','DDegg','LSTyolk','DDlarv','Version')
##### BRING IN FISH DATA AND PROCESS A BIT ####
#### data through 2015 from the 2016 assessment ####
fish2016 = data.frame(read.table('SablefishData2015.csv', header=TRUE, sep=','))
h = 0.6
Ro = 17198
So = 115622
b = (Ro*0.2*So)/(h*Ro)-(0.2*So)
S = fish2016$sp.bio
R.pred <- (Ro*S/(b+S))
R.ass = fish2016$age.0 # recruitment from the 20216 assessment
resids = R.ass - R.pred
# resids
fish2016$resids = resids
# head(fish2016)
colnames(fish2016)[1] = 'Year'
#### bring in data from the 2019 stock assessement ####
fish2019 <- data.frame((read.csv("Src/NicksSablefishComparison/Data_All_Proccessed_Data.csv", header=TRUE )))
fish2019 <- data.frame((read.csv("Data_All_Proccessed_Data.csv", header=TRUE )))
fishyy = fish2019[fish2019$year %in% 1981:2019,c('year','resids','Rec_Dev_Value')]
colnames(fishyy) <- c('Year','resids2019','recdev2019')
fishy = merge(ROMS, fishyy, by = 'Year')
fish <- merge(fishy, fish2016, by = "Year", all=TRUE)
# head(fish)
# tail(fish)
write.csv(fish,'D_Fish_ROMS_north_update.csv', row.names = FALSE)
par( mfrow = c(3,2), mar = c(4,4,1,1))
fish$years = ifelse(fish$Version == 'old',"1980-2010","2011-2018")
plot( as.factor(fish$years), fish$DDpre, main = "DDpre" )
plot( as.factor(fish$years), fish$DDegg, main = "DDegg" )
plot( as.factor(fish$years), fish$CSTegg, main = "CSTeg" )
plot( as.factor(fish$years), fish$LSTyolk, main = "LSTyolk" )
plot( as.factor(fish$years), fish$DDlarv, main = "DDlarv" )
par(mfrow = c(3,2), mar = c(4,4,1,1))
yrs = 1980:2020
plot(fish$Year,fish$DDpre,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDpre')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$DDegg,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDegg')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$CSTegg,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'CSTegg')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$LSTyolk,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'LSTyolk')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$DDlarv,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDlarv')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
#### 2016 vs 2019 data ####
x = fish$resids[fish$Year %in% 1981:2010]
y = fish$resids2019[fish$Year %in% 1981:2010]
r_2016_vs_2019 = round(cor(x,y),2)
library(vegan)
install.packages("vegan")
par(mfrow = c(3,2), mar = c(4,4,1,1))
yrs = 1980:2020
plot(fish$Year,fish$DDpre,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDpre')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$DDegg,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDegg')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$CSTegg,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'CSTegg')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$LSTyolk,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'LSTyolk')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
plot(fish$Year,fish$DDlarv,type='l', xlab = NA, xlim = c(min(yrs), max(yrs)), ylab = 'DDlarv')
axis(side=1, at = yrs, tck=-0.02, labels=NA)
#### 2016 vs 2019 data ####
x = fish$resids[fish$Year %in% 1981:2010]
y = fish$resids2019[fish$Year %in% 1981:2010]
r_2016_vs_2019 = round(cor(x,y),2)
library(vegan)
dx = fish[fish$Year %in% 1981:2018, c('DDpre','CSTegg','DDegg','LSTyolk','DDlarv')]
# normalize data
dy = apply(dx, 2, scale)
dc = ifelse(fish$Year[fish$Year %in% 1981:2018] < 2011, "white", "black")
# untransformed values
m1 = metaMDS(dx, distance = 'euclidean')
par(mfrow = c(2,2), par = c(2,1,1,1))
ordiplot(m1 , xlim = c(-75,75), main = "Untransformed ROMS")
x = as.numeric(m1$points[,1])
y = as.numeric(m1$points[,2])
points(x,y, pch=21, bg = dc)
ordiplot(m1 , type='none', xlim = c(-75,75))
text(x,y, 1981:2018, cex = 0.7)
# normalized time series
m1 = metaMDS(dy, distance = 'euclidean')
ordiplot(m1,xlim = c(-5,5), main = "Normalized ROMS")
x = as.numeric(m1$points[,1])
y = as.numeric(m1$points[,2])
points(x,y, pch=21, bg = dc)
ordiplot(m1, xlim = c(-5,5), type='none')
text(x,y, 1981:2018, cex = 0.7)
Full_Glory_Yellow_Tail.df <- read.csv(
here("Data", "Yellowtail", "2024Env-annual-yellowtail_GLORYS_UNSTANDARDIZED.csv")
)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(here)
library(patchwork)
Full_Glory_Yellow_Tail.df <- read.csv(
here("Data", "Yellowtail", "2024Env-annual-yellowtail_GLORYS_UNSTANDARDIZED.csv")
)
head(Full_Glory_Yellow_Tail.df)
Full_Glory_Yellow_Tail.df <- read.csv(
here("Data", "Yellowtail", "2024Env-annual-yellowtail_GLORYS_UNSTANDARDIZED.csv")
)
head(Full_Glory_Yellow_Tail.df)
scale(Full_Glory_Yellow_Tail.df)
scaled <- scale(Full_Glory_Yellow_Tail.df)
colMeans(scaled)
colMeans(na.omit(scaled))
scale(Full_Glory_Yellow_Tail.df)
scaled <- scale(Full_Glory_Yellow_Tail.df)
mean(scaled$Year)
scaled <- data.frame(scale(Full_Glory_Yellow_Tail.df))
mean(scaled$Year)
colMeans(na.omit(scaled))
scaled <- data.frame(scale(Full_Glory_Yellow_Tail.df))
mean(scaled$Year)
mean(na.omit(scaled$Year))
mean(na.omit(scaled$bakun_sti))
ncol(Full_Glory_Yellow_Tail.df)
Full_Glory_Yellow_Tail.df
Full_Glory_Yellow_Tail.df <- read.csv(
here("Data", "Yellowtail", "2024Env-annual-yellowtail_GLORYS_UNSTANDARDIZED.csv")
)%>%
filter(year>=1994&year<=2024)
Full_Glory_Yellow_Tail.df
dat<- read.csv(
here("Data", "Yellowtail", "2024Env-annual-yellowtail_GLORYS_UNSTANDARDIZED.csv")
)%>%
filter(year>=1994&year<=2024) # lets filter the data so we dont have any missing values
dat[,i]
dat[,1]
i<-1
mean(dat[,i])
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized[,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized <- data.frame() # a
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(Full_Glory_Yellow_Tail.df){
mean[,i]
dat[,i]-mean(dat[,i])
(dat[,i]-mean(dat[,i]))/sd(dat[,i]
}
(dat[,i]-mean(dat[,i]))/sd(dat[,i]
(dat[,i]-mean(dat[,i]))/sd(dat[,i]
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized[,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized[,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized <- NA # a
standardized[,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
standardized[,i]
standardized <-data.frame(ncol=ncol(Full_Glory_Yellow_Tail.df))# a
standardized[,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat <-data.frame()
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat[1:31,i]<-(dat[,i]-mean(dat[,i]))/sd(dat[,i])
for(i in 1:ncol(dat){
for(i in 1:ncol(dat){
stand_dat[1:31,i]<- dat[,i]-mean(dat[,i]/sd(dat[,i])
}
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i])/sd(dat[,i])
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i])/sd(dat[,i])
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i])/sd(dat[,i])
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i])/sd(dat[,i])
stand_dat <-data.frame()
for(i in 1:ncol(dat){
for(i in 1:ncol(dat)){
stand_dat
stand_dat <-data.frame()
#i is what we want the loop to iterate over, in this case i is columns. If we want the
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
for(i in 1:ncol(dat)){
}
stand_dat
(dat[,i]-mean(dat[,i])/sd(dat[,i])
(dat[,i]-mean(dat[,i])/sd(dat[,i])
(dat[,i]-mean(dat[,i])/sd(dat[,i])
mean(dat[,i])
mean(dat[,i])
dat[,i]-mean(dat[,i])
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i]
}
for(i in 1:ncol(dat)){
stand_dat <-data.frame()
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i]
}
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i]
}
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i]
(dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat[1:31,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat <-data.frame()
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat <-ls()
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat <-list()
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat <-NA
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat <-NA
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat<- cbind(stand_dat,stand_dat)
}
stand_dat
stand_dat <-NA
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
temp<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
stand_dat<- cbind(stand_dat,temp)
}
stand_dat
stand_dat <-dat
stand_dat <-dat
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat
stand_dat <-dat
#i is what we want the loop to iterate over, in this case i is columns. If we want the
# loop to loop over every column, we can start it at 1 and go to the total number
# of columns. ncol() is a function that counts the number of columns in a dataframe
# so in this case we will loop from column 1 to the last column
for(i in 1:ncol(dat)){
stand_dat[,i]<- (dat[,i]-mean(dat[,i]))/sd(dat[,i])
}
stand_dat
colMeans(stand_dat)
apply(stand_dat, 2, sd)
colMeans(stand_dat)
apply(dat, 2, scale)
stand_data_apply <- apply(dat, 2, scale)
stand_data_apply - stand_dat
diff<-stand_data_apply - stand_dat
head(diff)
head(stand_data_apply )
scale_dat_scale <- scale(dat)
apply(scale_dat_scale, 2, sd)
apply(na.omit(scale_dat_scale), 2, sd)
apply(scale_dat_scale, 2, sd)
View(dat)
